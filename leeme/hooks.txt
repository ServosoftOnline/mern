- HOOKS

    - Funciones de React que permite trabajar con el estado de vida de los componentes    
    - "Es una funcion que cuando pasa algo hace algo"

    - Hooks más usuales:

        - useState. Permite trabajar con los estados de react

            - Tiene tres partes:
                - la vble que guarda el dato
                - la funcion que permite acceder a ese dato y modificarlo
                - Su valor por defecto                

        - useEffect. 
            - Hooks que produce un efecto.
            - Cada vez que se cargue un componente o este cambie de estado se lanzaría una funcion

        - useParams.
            - Permite recibir parámetros enviados desde la barra del navegador
            - Las rutas deben definir esos parametros desde el componente Route

    - Hooks importantes, menos usuales

        - useRef

            - Hace una referencia con un elemento del DOM que persistirá durante el ciclo de vida del componente
            - Devuelve un objeto de referencia mutable que va a tener una propiedad current con un valor dentro.
            - Este objeto contiene información que siempre estará actualizado
                - A diferencia del hook useState:
                    - No necesitará una función asociada al estado
                    - No renderiza de nuevo el componente

                - Información que siempre se encontrará actualizado a traves de la propiedad current.

            - Ejemplos de uso:
                - Permite obtener los datos de un formulario mediante el uso de referencias
                - Añadir referencias a elementos del DOM y acceder a ellos de forma directa
                 
            - En el proyecto useRef aplico estos conocimientos

        - useMemo y funcion react.memo()

            - Ambos sirven para evitar que se renderizen componentes de forma innecesaria
            - useMemo
                - Devuelve un valor memorizado
                - Solo se ejecuta cuando se actualiza una de sus dependencias igual que useEffect
                - Sirve para operaciones que requieren mucha carga o esfuerzo
                - Evitando así problemas de rendimiento. Es usual
            
            - El método react.memo funciona igual pero se aplica a componentes enteros
            - Ver el proyecto useMemo donde por ahora solo aplico react.memo

        - useCallback
            - Esta relacionado con el useMemo y el método react.memo

            - Permite memorizar Funciones
                - Paso funciones como propiedad a un componente
                - Evito que esta funcion se ejecute si no es necesario
                - Precisa de una dependencia para tener control sobre ella

                - Lo aplico:
                    - Usando el hook useCallback en el componente que tiene la funcion a memorizar
                    - Introduzco la funcion dentro del callback del useCallback
                    - Le añado una dependencia
                    - Paso la funcion que quiero memorizar como propiedad al componente deseado

            - Ver ejemplo en el componente Gestion del proyecto useMemo

        - useLayoutEffect
            
            - Diferencias con useEffect:
            - useLayoutEffect se ejecuta de manera sincrona.
                - Primero se ejecuta la funcion que tenga dentro del callback y despues renderiza el componente
                - Se suele usar cuando necesito que finalize una acción antes de renderizar
                    - Cuando sucede esto parpadea al renderizar

            - useEffect se ejecuta de manera asincrona
                - Primero se renderiza el componente y despues se ejecuta la funcion callback de su interior

            - Es recomendable usar useEffect y si se aprecian errores al renderizar probar con useLayoutEffect
            - Ver ejemplo de uso en el proyecto useLayoutEffect en el proyecto useLayoutEffect

        - useReducer:

            - Alternativa a useState
            - Encapsula a todas las funciones sincronas que permiten modificar un estado
                - Este estado contendrá un array de objetos

            - Creo una carpeta reducers donde almaceno los reducers.

            - Extructura de un reducer:

                - No es necesario importar react
                - Es una funcion exportada que tiene dos parámetros:
                    - el estado que por defecto viene vacio
                    - la acción a disparar o lanzar
                    
                - Uso un switch / case
                - Elimino el break de los casos y en default devuelvo el estado.
                - Para lanzar el reducer debo usar la funcion dispatch a la cual le paso un objeto con dos datos:
                    - El tipo, que llamaré type, de acción a lanzar
                    - Los datos, que llamare payload, que se corresponden con los datos con los que tratar

                - En el caso que la acción a lanzar sea crear
                    - devuelvo un array de objetos que tenga lo que ya tenia el estado más el nuevo payload
                
            - En el componente que voy a usarlo:
                - Importo useReducer desde react
                - Importo el reducer

                - Creo el estado mediante useReducer:
                    - Contiene el nombre del estado, se enviará al reducer cuando ejecute dispatch.
                    - La funcion dispatch que será la que se encargue de modificar el estado
                    - Dentro de los parentesis de useReducer añado 3 parámetros:
                        - El reducer importado
                        - El valor inicial del estado
                        - Una función inicializadora llamada init que debemos declarar fuera del componente
                            - Procesa algun dato para asignarlo al estado:
                                - Peticiones AJAX o sacar información de localstorage
                
                - Mediante un useEffect inicio en el localstorage o actualizo con respecto al estado
                - Voy creando diferentes funciones dependiendo de la acción que quiera realizar
                - En esas funciones creo el objeto con el type y el payload y ejecuto el dispatch

        - useContext

            - Ayuda en la resolución sobre como compartir información entre componentes           
            - Permite tratar información en el routing compartiendo la información entre componentes
            - Tambien permite añadir al contexto estados
            - Ver aplicación de este hook en el proyecto useContext

        - useId
            - Crea un identificador único que sirve para el cliente y el servidor
            - Ver su aplicación en el proyecto mas-Hooks

    - Hooks personalizados:
    
        - Permite crear funcionalidades reutilizables en un proyecto.
            - Equivaldrían a las funciones en otros lenguajes de programación

        - Suelen guardarse en una carpeta propia.
            - Yo los guardaré en Hooks dentro del proyecto mas-Hooks
            - Su nombre empieza por use
            - El proyecto mas-hooks contiene tres ejemplos de hooks personalizados
                - useAjax, hace peticiones ajax
                - useCaracteres, modifica los caracteres de una cadena
                - useForm, obtiene toda la información de un formulario